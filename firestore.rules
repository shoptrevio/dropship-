rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated.
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to get the user's role from the /users collection.
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    // Helper function to check if the user is an admin.
    function isAdmin() {
      return isAuthenticated() && getUserRole(request.auth.uid) == 'admin';
    }

    // Helper function to check if the user is a staff member.
    function isStaff() {
      return isAuthenticated() && getUserRole(request.auth.uid) in ['admin', 'staff'];
    }
    
    // Helper function to check if user is a UX Tester.
    function isTester() {
      return isAuthenticated() && getUserRole(request.auth.uid) == 'ux-tester';
    }


    // Products are readable by everyone, but only writable by admins or suppliers for their own products.
    match /products/{productId} {
      // Anyone, including unauthenticated users, can view products.
      // This is optimized for high-traffic product pages.
      allow read: if true;

      // Only admins or the assigned supplier can create or update products.
      allow write: if isAdmin() || (isStaff() && request.resource.data.supplierId == request.auth.uid);
    }
    
    // Suppliers can only be read or written by admins to protect sensitive info like API keys.
    match /suppliers/{supplierId} {
        allow read, write: if isAdmin();
    }

    // Users can manage their own data. Admins have full access.
    match /users/{userId} {
      // A user can read and write to their own document.
      allow read, write: if request.auth.uid == userId;
      
      // Admins can read any user profile.
      allow get: if isAdmin();
      
      // Admins can create or update any user document (e.g., to assign roles).
      allow create, update: if isAdmin();
    }

    // Orders can be created by authenticated users for themselves. Staff/Admins can manage all orders.
    match /orders/{orderId} {
      // Users can read their own orders.
      allow get: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Authenticated users can create their own orders.
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;

      // Staff and admins can read and update any order (e.g., to change status).
      allow list, update: if isStaff();
      
      // Only admins can delete orders.
      allow delete: if isAdmin();
    }

    // AI model configurations are admin-only.
    match /ai_models/{modelId} {
      allow read, write: if isAdmin() || isTester();
    }
    
    // AI training feedback can be submitted by any authenticated user.
    match /ai_training_feedback/{feedbackId} {
        allow create: if isAuthenticated();
        allow read, write: if isAdmin(); // Admins can manage feedback
    }

    // AI decision logs are write-only for the backend and read-only for admins.
    match /ai_decision_logs/{logId} {
        allow read: if isAdmin();
        // Writes should only come from trusted server environments (e.g., Cloud Functions).
        // This rule prevents any client-side writes.
        allow write: if false; 
    }

    // Geo-targeted UX variations are readable by anyone, but only writable by admins.
    match /geo_targeted_ux/{geoId} {
        allow read: if true;
        allow write: if isAdmin();
    }
  }
}
