
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if a user has purchased a specific product
    function hasPurchasedProduct(userId, productId) {
      return exists(/databases/$(database)/documents/orders/{orderId})
             && get(/databases/$(database)/documents/orders/{orderId}).data.userId == userId
             && productId in get(/databases/$(database)/documents/orders/{orderId}).data.items.map(item => item.productId);
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      allow read: if true; // Publicly readable
      allow create: if request.auth != null; // Allow user creation
      allow update: if request.auth.uid == userId; // Only owner can update
      allow delete: if false; // Disallow client-side deletion
    }

    // Rules for the 'products' collection
    match /products/{productId} {
      // Allow read only if the product status is 'active' or if the user is an admin.
      // Note: This rule grants access to the *entire* document. Field-level security for reads is not possible.
      // Sensitive data should be in a separate collection.
      allow read: if resource.data.status == 'active' || isAdmin();
      
      // Only admins can create, update, or delete products.
      allow write: if isAdmin();
    }
    
    // Rules for the 'product_reviews' collection
    match /product_reviews/{reviewId} {
      allow read: if true; // Reviews are public
      
      // Allow creation only if the user is authenticated, has purchased the product,
      // and the review data is valid.
      allow create: if request.auth != null
                    && request.resource.data.rating >= 1 && request.resource.data.rating <= 5
                    && hasPurchasedProduct(request.auth.uid, request.resource.data.productId);
                    
      // Only the author of the review can update or delete it.
      allow update, delete: if request.auth.uid == resource.data.userId;
    }

    // Rules for the 'orders' collection
    match /orders/{orderId} {
      allow read, update: if request.auth.uid == resource.data.userId || isAdmin();
      
      // Allow create only if the user is authenticated and is not trying to place an order from a high-risk country.
      // Note: The 'country' must be provided by the client application.
      allow create: if request.auth != null && 
                     !['XYZ', 'ABC'].hasAny([request.resource.data.shippingAddress.country]);
    }
    
    // Rules for all other collections (development-friendly)
    match /{document=**} {
      allow read, write: if request.auth != null;
    }
  }
}
