rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for common access control patterns.
    function isAdmin() {
      return request.auth.token.role == 'admin';
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // --- Product and Order Rules ---

    // Products are publicly readable if 'active', but only writable by admins.
    match /products/{productId} {
      allow read: if resource.data.status == 'active';
      allow write: if isAdmin();
    }

    // Users can manage their own profile. Admins can manage any user.
    match /users/{userId} {
      allow get, update: if isOwner(userId) || isAdmin();
      allow create: if request.auth != null; // A user can create their own profile.
      allow delete: if isAdmin();
      // Listing users is disallowed for security.
      allow list: if isAdmin();
    }

    // Users can manage their own orders. Admins can manage any order.
    match /orders/{orderId} {
      allow read, update: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isOwner(request.resource.data.userId);
      allow delete: if isAdmin();
    }

    // Admins can read transaction data for dashboards.
    // Clients should use a callable function instead of reading directly.
    match /transactions/{transactionId} {
        allow read, write: if isAdmin();
    }

    // Admin users collection is only accessible by other admins.
    match /admin_users/{email} {
      allow read, write: if isAdmin();
    }
  }
}

// --- Firebase Storage Rules ---
service firebase.storage {
  match /b/{bucket}/o {
    // Files are publicly readable, but this can be restricted.
    // match /{allPaths=**} {
    //   allow read;
    // }

    // Allow users to upload to their own designated folder.
    // The client MUST upload to a path like 'user-uploads/some-user-id/file.jpg'.
    match /user-uploads/{userId}/{allPaths=**} {
      // Any authenticated user can read from any user's folder.
      // You could tighten this to `if request.auth.uid == userId;` if needed.
      allow read: if request.auth != null;

      // A user can only create/write to their own folder.
      allow write: if request.auth.uid == userId;
    }

    // Rules for product images.
    match /products/{productId}/{allPaths=**} {
        // Anyone can read product images.
        allow read;
        // Only admins can upload/update product images.
        allow write: if request.auth.token.role == 'admin';
    }
  }
}
