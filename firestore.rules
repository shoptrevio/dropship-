
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAdmin() {
      return request.auth.token.role == 'admin';
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isProductPurchased(productId) {
      // Check if a user has an order containing the specified product
      return exists(/databases/$(database)/documents/orders/{orderId}) &&
             resource.data.userId == request.auth.uid &&
             resource.data.items[?(@.productId == productId)].size() > 0;
    }

    // Collection: products
    // Rules:
    // - Anyone can read a product if its status is 'active'.
    // - Only admins can create, update, or delete products.
    match /products/{productId} {
      allow read: if resource.data.status == 'active';
      allow write: if isAdmin();
    }
    
    // Collection: product_reviews
    // Rules:
    // - Allow creation only if the user is authenticated and has purchased the product.
    match /products/{productId}/product_reviews/{reviewId} {
       allow create: if isProductPurchased(productId);
       allow read: if true;
       allow update, delete: if isOwner(request.auth.uid) || isAdmin();
    }

    // Collection: users
    // Rules:
    // - A user can read or update their own profile.
    // - Admins can read or update any user profile.
    // - Authenticated users can create their own profile.
    // - Only admins can delete user profiles.
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isAdmin();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Collection: orders
    // Rules:
    // - A user can read or update their own orders.
    // - Admins can access any order.
    // - A user can only create an order for themselves.
    match /orders/{orderId} {
      allow get, list, update: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isOwner(request.resource.data.userId);
      allow delete: if isAdmin();
    }
    
    // Collection: transactions
    // Rules:
    // - Deny all client-side access. Data should be accessed via secure Cloud Functions.
    match /transactions/{transactionId} {
        allow read, write: if false;
    }
    
    // Collection: tickets
    // Rules:
    // - Users can create tickets for themselves.
    // - Users can read their own tickets.
    // - Admins can read/write all tickets.
    match /tickets/{ticketId} {
      allow create: if isOwner(request.resource.data.userId);
      allow read, update: if isOwner(resource.data.userId) || isAdmin();
      allow list: if isAdmin();
      allow delete: if isAdmin();
    }

    // By default, disallow all other reads and writes
  }
}
