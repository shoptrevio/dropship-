
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAdmin() {
      return request.auth != null && request.auth.token.role == 'admin';
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // -- Collections --

    // Products can be read by anyone if they are 'active', but only written by admins.
    match /products/{productId} {
      allow read: if resource.data.status == 'active';
      allow write: if isAdmin();
    }
    
    // Users can create their own profile, and can only read/update their own document. Admins can read/write any user.
    match /users/{userId} {
      allow create: if isOwner(userId);
      allow get, update: if isOwner(userId) || isAdmin();
      allow list, delete: if isAdmin();
    }

    // Orders can be created by any authenticated user for themselves. They can only be read/updated by the owner or an admin.
    match /orders/{orderId} {
      allow create: if isOwner(resource.data.userId);
      allow get, update: if isOwner(resource.data.userId) || isAdmin();
      allow list, delete: if isAdmin();
    }

    // Transactions can only be accessed via secure Cloud Functions. No direct client access.
    match /transactions/{transactionId} {
        allow read, write: if false;
    }
    
    // Tickets can only be read/written by the user who created them or by an admin.
    match /tickets/{ticketId} {
      allow read, write: if isOwner(resource.data.userId) || isAdmin();
    }
    
    // Admins can create other admins by adding their email to this collection. No one else can read/write here.
    match /admin_users/{email} {
        allow read, write: if isAdmin();
    }

    // Logs collection is write-only for functions, and not readable by any client.
    match /logs/{logId} {
      allow read, write: if false;
    }
  }
}
