
rules_version = '2';

// Best-practice security rules for a high-performance e-commerce platform.
// These rules are secure by default, meaning access is denied unless explicitly allowed.
service cloud.firestore {
  match /databases/{database}/documents {
    // Reusable functions to keep rules DRY and readable.
    function isAdmin() {
      return request.auth.token.role == 'admin';
    }
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Products:
    // - Customers can only read 'active' products.
    // - Admins can write (create, update, delete) any product.
    match /products/{productId} {
      allow read: if resource.data.status == 'active';
      allow write: if isAdmin();
    }
    
    // Users:
    // - Users can read/update their own profile.
    // - Admins can access any user profile.
    // - Authenticated users can create their own profile.
    match /users/{userId} {
      allow get, update: if isOwner(userId) || isAdmin();
      allow create: if request.auth != null && isOwner(userId);
      allow list, delete: if isAdmin();
    }
    
    // Orders:
    // - Users can only read/update their own orders.
    // - Admins can access any order.
    // - Users can create their own orders.
    match /orders/{orderId} {
       allow get, update: if isOwner(resource.data.userId) || isAdmin();
       allow create: if isOwner(request.resource.data.userId);
       allow list, delete: if isAdmin();
    }
    
    // Reviews:
    // - Allow users to create a review only if they have purchased the product.
    // - This is a highly secure rule that queries the 'orders' collection.
    // - Note: This rule can be more complex and may impact performance.
    // - A 'product_reviews' subcollection under products/{productId}.
    match /products/{productId}/product_reviews/{reviewId} {
      allow create: if request.auth != null && 
        exists(/databases/$(database)/documents/orders/$(request.resource.data.orderId)) &&
        get(/databases/$(database)/documents/orders/$(request.resource.data.orderId)).data.userId == request.auth.uid;
      
      allow read;
      allow update, delete: if isOwner(resource.data.userId) || isAdmin();
    }

    // Transactions:
    // - No client-side access. All reads must go through a trusted Cloud Function.
    match /transactions/{transactionId} {
      allow read, write: if false;
    }

    // Tickets:
    // - Users can create tickets.
    // - Admins can do anything.
    match /tickets/{ticketId} {
      allow create: if request.auth != null;
      allow read, write: if isAdmin();
    }

    // Default deny: Any collection not explicitly matched is fully locked down.
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

// Rules for Firebase Storage
service firebase.storage {
  match /b/{bucket}/o {

    // Product Images:
    // - Anyone can read product images (they are public).
    // - Only admins can upload product images.
    // - Validate that uploads are images and are under 5MB.
    match /products/{productId}/{imageFile} {
      allow read;
      allow write: if request.auth.token.role == 'admin'
                   && request.resource.size < 5 * 1024 * 1024
                   && request.resource.contentType.matches('image/.*');
    }

    // User-specific files (e.g., profile pictures):
    // - A user can only read/write to their own folder.
    // - Validates file size and content type.
    match /user-uploads/{userId}/{file} {
      allow read, write: if request.auth.uid == userId
                         && request.resource.size < 5 * 1024 * 1024
                         && request.resource.contentType.matches('image/.*');
    }

    // Default deny for any other path.
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
