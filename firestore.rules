rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Products: Publicly readable, only admins can write.
    match /products/{productId} {
      allow read: if true;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users: Users can read public profiles. Only the document owner can update their own profile. Admins can write to any user profile.
    match /users/{userId} {
      allow read: if true;
      allow write: if isOwner(userId) || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Orders:
    // - Users can create orders for themselves.
    // - Creation is blocked if the shipping country is on a high-risk list.
    // - Users can read their own orders.
    // - Admins can read all orders.
    // - Updates/deletes are disallowed for users to maintain order integrity.
    match /orders/{orderId} {
      function isHighRiskCountry() {
        // This list should be managed carefully.
        // The country code is expected to be provided by the client in the order data.
        let highRiskCountries = ['KP', 'IR', 'SY']; // Example: North Korea, Iran, Syria
        return request.resource.data.shippingAddress.country in highRiskCountries;
      }
      
      allow create: if isOwner(request.resource.data.userId) && !isHighRiskCountry();
      allow read: if isOwner(resource.data.userId) || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow update, delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Product Reviews:
    // - Allow creation only if the user has purchased the product.
    // - Review data must be valid (rating between 1 and 5).
    // - Allow public read access.
    // - Allow updates/deletes only by the review's author.
    match /product_reviews/{reviewId} {
        function hasPurchasedProduct(productId) {
            return exists(/databases/$(database)/documents/orders/$(request.auth.uid)) &&
                   productId in get(/databases/$(database)/documents/orders/$(request.auth.uid)).data.items;
        }

        allow create: if request.auth != null &&
                         'rating' in request.resource.data &&
                         request.resource.data.rating >= 1 &&
                         request.resource.data.rating <= 5 &&
                         exists(
                           /databases/$(database)/documents/orders/$(request.resource.data.userId)
                         ) &&
                         get(
                           /databases/$(database)/documents/orders/$(request.resource.data.userId)
                         ).data.items.hasAny([request.resource.data.productId]);

        allow read: if true;
        allow update, delete: if isOwner(resource.data.userId);
    }


    // AI & UX Configuration: Read-only for clients, writable for admins.
    match /ai_models/{modelId} {
      allow read: if true;
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    match /ux_config/{configId} {
      allow read: if true;
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /chat/{messageId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
    
    match /subscribers/{subscriberId} {
        allow read, write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /posts/{postId} {
      allow read: if true;
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /tickets/{ticketId} {
      allow read, write: if request.auth != null; // Simplified for now
    }
  }
}
